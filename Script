// Helper function to create and append an element with specific properties
function createElement(tag, options = {}) {
    const element = document.createElement(tag);
    Object.assign(element.style, options.style || {});
    if (options.id) element.id = options.id;
    if (options.textContent) element.textContent = options.textContent;
    if (options.innerHTML) element.innerHTML = options.innerHTML;
    if (options.className) element.className = options.className;
    return element;
}

// Reusable style object to minimize repetition
const commonStyles = {
    position: 'fixed',
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    color: 'white',
    borderRadius: '10px',
    boxShadow: '0 0 15px rgba(0, 0, 0, 0.7)',
    fontFamily: 'Arial, sans-serif',
    fontSize: '18px',
    fontWeight: 'bold',
};

// Function to create and display a persistent overlay 
function createPersistentOverlay() {
    if (document.getElementById('persistent-overlay')) return; // Exit if overlay exists

    const overlay = createElement('div', {
        id: 'persistent-overlay',
        style: {
            ...commonStyles,
            bottom: '20px',
            right: '20px',
            padding: '20px',
            textAlign: 'center',
            zIndex: '9999',
        },
        innerHTML: `
            <div>Ilakn</div>
            <div>Version 3.45</div>
            <button id="youtube-button" class="overlay-button">
                Subscribe to OffLcer Gaming
            </button>
        `,
    });

    // Set button functionality for YouTube link
    overlay.querySelector('#youtube-button').onclick = () => {
        window.open('https://youtube.com/@offlcergaming?si=5PExaPOmDsgxyVnd', '_blank');
    };

    document.body.appendChild(overlay);
}

// Function to create and display a draggable mod menu
function createModMenu() {
    if (document.getElementById('mod-menu')) return; // Exit if menu exists

    const menu = createElement('div', {
        id: 'mod-menu',
        style: {
            ...commonStyles,
            top: '20px',
            left: '20px',
            padding: '15px',
            zIndex: '10000',
            cursor: 'move',
        },
        textContent: 'Mod Menu',
    });

    // Add "Coming Soon!" button
    const comingSoonButton = createElement('button', {
        textContent: 'Coming Soon!',
        style: {
            marginTop: '10px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            backgroundColor: '#555',
            color: 'white',
            cursor: 'pointer',
        },
    });

    comingSoonButton.onclick = () => alert('Coming Soon!');
    menu.appendChild(comingSoonButton);

    // Add drag functionality
    let offsetX, offsetY;

    menu.onmousedown = (event) => {
        offsetX = event.clientX - menu.getBoundingClientRect().left;
        offsetY = event.clientY - menu.getBoundingClientRect().top;

        document.onmousemove = (event) => {
            menu.style.left = `${event.clientX - offsetX}px`;
            menu.style.top = `${event.clientY - offsetY}px`;
        };

        document.onmouseup = () => {
            document.onmousemove = null;
            document.onmouseup = null;
        };
    };

    document.body.appendChild(menu);
}

// Function to handle the problem-solving logic
function solveProblem() {
    const problemElement = document.querySelector(".card-title");
    if (!problemElement) return retrySolveProblem(); // Retry if problem element not found

    const problem = problemElement.innerText.trim();
    const [num1Str, num2Str] = problem.split('x').map(str => str.trim());

    // Ensure correct parsing of numbers
    const num1 = parseInt(num1Str, 10);
    const num2 = parseInt(num2Str, 10);
    if (isNaN(num1) || isNaN(num2)) return retrySolveProblem(); // Retry if numbers invalid

    const answer = num1 * num2;
    const options = Array.from(document.querySelectorAll(".card-button"));

    // Find and click the correct option
    const correctOption = options.find(option => parseInt(option.innerText.trim(), 10) === answer);
    if (correctOption) {
        correctOption.click();
    } else {
        retrySolveProblem();
    }
}

// Retry solving after a 0.25-second delay
function retrySolveProblem() {
    clearTimeout(window.freeRiceHackTimeout);
    window.freeRiceHackTimeout = setTimeout(solveProblemLoop, 250); // Retry every 0.25 seconds
}

// Function to continuously solve problems with a 0.25-second delay
function solveProblemLoop() {
    solveProblem();
    window.freeRiceHackTimeout = setTimeout(solveProblemLoop, 250); // Repeat every 0.25 seconds
}

// Main function to initialize the overlay, menu, and start solving problems
window.freeRiceHackFunc = function() {
    createPersistentOverlay();
    createModMenu();
    solveProblemLoop(); // Start the continuous solving process
};

// Initialize and start the function
window.freeRiceHackFunc();
