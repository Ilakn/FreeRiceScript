// Helper function to create and append an element with specific properties
function createElement(tag, options = {}) {
    const element = document.createElement(tag);
    Object.assign(element.style, options.style || {});
    Object.assign(element, {
        id: options.id || '',
        textContent: options.textContent || '',
        innerHTML: options.innerHTML || '',
        className: options.className || '',
    });
    return element;
}

// Default styles for overlays and menus
const defaultStyles = {
    position: 'fixed',
    backgroundColor: 'rgba(255, 255, 255, 0.9)',
    color: 'black',
    borderRadius: '10px',
    boxShadow: '0 0 10px rgba(0, 0, 0, 0.5)',
    fontFamily: 'Arial, sans-serif',
    fontSize: '18px',
    fontWeight: 'bold',
};

// Gold theme styles
const goldStyles = {
    ...defaultStyles,
    backgroundColor: 'rgba(255, 215, 0, 0.9)',
    boxShadow: '0 0 15px rgba(0, 0, 0, 0.7)',
};

// Initialize AFK mode and solving speeds
let afkMode = false;
let normalSolveSpeed = 100;
let afkSolveSpeed = 250; // AFK solving speed
let pointMultiplier = 1;
let timerDuration = 5 * 60 * 60; // 5 hours in seconds
let timerInterval;

// Create a persistent overlay
function createPersistentOverlay() {
    if (document.getElementById('persistent-overlay')) return;

    const overlay = createElement('div', {
        id: 'persistent-overlay',
        style: {
            ...defaultStyles,
            bottom: '20px',
            right: '20px',
            padding: '20px',
            textAlign: 'center',
            zIndex: '9999',
        },
        innerHTML: `
            <div>Ilakn</div>
            <div>Version 3.45</div>
            ${['YouTube', 'Discord', 'Bonus Promo Code', 'Activate Firewall'].map(text => `
                <button id="${text.toLowerCase().replace(/ /g, '-')}-button" class="overlay-button"
                    style="margin-top: 10px; padding: 10px; border: none; border-radius: 5px; background-color: ${getButtonColor(text)}; color: black; cursor: pointer; font-size: 16px;">
                    ${text}
                </button>`).join('')}
        `,
    });

    overlay.querySelector('#youtube-button').onclick = () => window.open('https://youtube.com/@offlcergaming?si=5PExaPOmDsgxyVnd', '_blank');
    overlay.querySelector('#discord-button').onclick = () => window.open('https://discord.gg/jmyBRXKr', '_blank');
    overlay.querySelector('#bonus-promo-code-button').onclick = handlePromoCode;
    overlay.querySelector('#activate-firewall-button').onclick = activateFirewall;

    document.body.appendChild(overlay);
}

// Get button color based on type
function getButtonColor(buttonText) {
    switch (buttonText) {
        case 'YouTube': return '#ffcc00';
        case 'Discord': return '#f7d36f';
        case 'Bonus Promo Code': return '#ffd700';
        case 'Activate Firewall': return '#d32f2f';
        default: return '#e0e0e0';
    }
}

// Handle promo code logic
function handlePromoCode() {
    const promoCode = prompt("Enter your promo code:", "");
    if (promoCode === 'IlaknSCRIPTS') {
        applyGoldTheme();
        updateButtons();
    } else if (promoCode !== null) {
        alert(`Promo code entered: ${promoCode}\nLook in the Discord for details.`);
    }
}

// Function to update buttons after applying the gold theme
function updateButtons() {
    const overlay = document.getElementById('persistent-overlay');
    if (!overlay) return;

    const buttonUpdates = {
        'youtube-button': 'YouTube Channel - Gold Theme',
        'discord-button': 'Discord Server - Gold Theme',
        'bonus-promo-code-button': 'Bonus Promo Code Applied',
    };

    Object.entries(buttonUpdates).forEach(([id, text]) => {
        const button = overlay.querySelector(`#${id}`);
        if (button) {
            button.textContent = text;
            button.style.backgroundColor = '#ffb300'; // Gold background
        }
    });
}

// Function to create and display the Notes button
function createNotesButton() {
    if (document.getElementById('notes-button')) return;

    const notesButton = createElement('button', {
        id: 'notes-button',
        textContent: 'Notes',
        style: {
            position: 'absolute',
            top: '10px',
            right: '20px',
            padding: '10px 20px',
            backgroundColor: '#e0e0e0',
            color: 'black',
            border: 'none',
            borderRadius: '5px',
            fontSize: '16px',
            cursor: 'pointer',
            zIndex: '9999',
        },
    });

    notesButton.onclick = () => window.open('https://forms.gle/M4dNsLhypqAJQjs58', '_blank');
    document.body.appendChild(notesButton);
}

// Function to create a draggable mod menu
function createModMenu() {
    if (document.getElementById('mod-menu')) return;

    const menu = createElement('div', {
        id: 'mod-menu',
        style: {
            ...defaultStyles,
            top: '20px',
            left: '20px',
            padding: '15px',
            zIndex: '10000',
            cursor: 'move',
            width: '220px',
        },
        innerHTML: '<h3 style="margin: 0; font-size: 22px;">Mod Menu</h3>',
    });

    const afkButton = createButton('AFK/School Mode', toggleAFKMode, '#fbc02d');
    const multiplierButton = createButton(`Point Multiplier: x${pointMultiplier}`, toggleMultiplier, '#ffd700');

    menu.appendChild(afkButton);
    menu.appendChild(multiplierButton);
    makeDraggable(menu);
    document.body.appendChild(menu);
}

// Create a styled button with additional styles
function createButton(text, onClick, backgroundColor) {
    const button = createElement('button', {
        textContent: text,
        style: {
            marginTop: '10px',
            border: 'none',
            borderRadius: '5px',
            backgroundColor,
            color: 'black',
            cursor: 'pointer',
            width: '100%',
            fontSize: '18px',
            padding: '10px',
            transition: 'background-color 0.3s, transform 0.3s',
        },
    });

    // Add hover effects
    button.onmouseover = () => {
        button.style.backgroundColor = '#ffd54f'; // Lighter shade on hover
        button.style.transform = 'scale(1.05)'; // Slightly enlarge on hover
    };
    button.onmouseout = () => {
        button.style.backgroundColor = backgroundColor; // Reset color
        button.style.transform = 'scale(1)'; // Reset size
    };

    button.onclick = onClick;
    return button;
}

// Toggle AFK/School Mode
function toggleAFKMode() {
    const confirmation = confirm("Are you sure you want to toggle AFK/School Mode?");
    if (confirmation) {
        afkMode ? disableAFKMode() : enableAFKMode();
    }
}

// Toggle Point Multiplier
function toggleMultiplier() {
    pointMultiplier = pointMultiplier === 1 ? 2 : 1; // Toggle between 1x and 2x
    const multiplierButton = document.getElementById('mod-menu').querySelector('button:nth-child(2)');
    if (multiplierButton) {
        multiplierButton.textContent = `Point Multiplier: x${pointMultiplier}`;
    }
}

// Make an element draggable
function makeDraggable(element) {
    let offsetX, offsetY;
    element.onmousedown = (event) => {
        offsetX = event.clientX - element.getBoundingClientRect().left;
        offsetY = event.clientY - element.getBoundingClientRect().top;

        const onMouseMove = (event) => {
            element.style.left = `${event.clientX - offsetX}px`;
            element.style.top = `${event.clientY - offsetY}px`;
        };

        const onMouseUp = () => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    };
}

// Enable AFK mode
function enableAFKMode() {
    afkMode = true;
    timerDuration = 5 * 60 * 60; // Reset timer to 5 hours
    const afkOverlay = createElement('div', {
        id: 'afk-overlay',
        style: {
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0, 0, 0, 0.7)',
            color: '#fff',
            zIndex: '100000',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '48px',
            fontWeight: 'bold',
        },
        innerHTML: `
            <div id="timer" style="font-size: 72px;">5:00:00</div>
            <div>AFK/SCHOOL MODE ENGAGED</div>
        `,
    });

    document.body.appendChild(afkOverlay);
    document.body.appendChild(createLeaveAFKButton());
    solveProblemLoop(afkSolveSpeed);
    startTimer();
}

// Start the countdown timer
function startTimer() {
    const timerDisplay = document.getElementById('timer');
    timerInterval = setInterval(() => {
        const hours = Math.floor(timerDuration / 3600);
        const minutes = Math.floor((timerDuration % 3600) / 60);
        const seconds = timerDuration % 60;
        timerDisplay.textContent = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`;

        if (timerDuration <= 0) {
            clearInterval(timerInterval);
            disableAFKMode();
        } else {
            timerDuration--;
        }
    }, 1000);
}

// Create Leave AFK button
function createLeaveAFKButton() {
    const leaveButton = createElement('button', {
        id: 'leave-afk-button',
        textContent: 'You cannot leave until time is up',
        style: {
            position: 'fixed',
            bottom: '50px',
            right: '50px',
            backgroundColor: '#ff0000',
            color: '#ffffff',
            fontSize: '24px',
            padding: '15px 25px',
            border: 'none',
            borderRadius: '10px',
            cursor: 'not-allowed',
            zIndex: '100001',
            pointerEvents: 'none', // Disable button
        },
    });

    return leaveButton;
}

// Disable AFK mode
function disableAFKMode() {
    if (!afkMode) return;

    afkMode = false;
    clearInterval(timerInterval);
    document.getElementById('afk-overlay')?.remove();
    document.getElementById('leave-afk-button')?.remove();
    solveProblemLoop(normalSolveSpeed);
    reloadScript();
}

// Reload the script
function reloadScript() {
    location.reload(); // Reload the current page
}

// Function to solve problems
function solveProblem() {
    const problemElement = document.querySelector(".card-title");
    if (!problemElement) {
        console.error("Problem element not found. Retrying...");
        return retrySolveProblem();
    }

    const [num1, num2] = problemElement.innerText.trim().split('x').map(str => parseInt(str.trim(), 10));
    if (isNaN(num1) || isNaN(num2)) {
        console.error("Error parsing numbers:", problemElement.innerText);
        return retrySolveProblem();
    }

    const answer = num1 * num2 * pointMultiplier; // Use point multiplier
    const options = Array.from(document.querySelectorAll(".card-button"));
    const correctOption = options.find(option => parseInt(option.innerText.trim(), 10) === answer);

    if (correctOption) {
        correctOption.click();
        console.log(`Clicked on the correct answer: ${answer}`);
    } else {
        console.error("Correct answer not found among options. Retrying...");
        retrySolveProblem();
    }
}

// Retry solving after a minimal delay
function retrySolveProblem() {
    setTimeout(solveProblem, 100);
}

// Continuous solving process with adjustable speed
function solveProblemLoop(speed) {
    solveProblem();
    setTimeout(() => solveProblemLoop(speed), speed);
}

// Firewall activation logic
const firewallPassword = 'Ilakn';

function activateFirewall() {
    const enteredPassword = prompt('Enter the firewall password:');
    if (enteredPassword === firewallPassword) {
        alert('Firewall activated successfully.');
        // Proceed with firewall activation logic
    } else {
        alert('Incorrect password. Redirecting you now.');
        redirectToPage();
    }
}

// Redirect user
function redirectToPage() {
    window.location.href = 'https://docs.google.com/document/d/1qpFejeD12fSktaD2N2C5pnX4N0FY0uDwmmf3PuxSJjM/edit';
    window.addEventListener('beforeunload', (event) => {
        event.preventDefault();
        event.returnValue = ''; // Fallback for modern browsers
    });
}

// Create the firewall button
function createFirewallButton() {
    const firewallButton = createElement('button', {
        id: 'firewall-button',
        textContent: 'Activate Firewall',
        style: {
            position: 'fixed',
            bottom: '20px',
            left: '20px',
            padding: '10px',
            backgroundColor: '#f00',
            color: '#fff',
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            zIndex: '100000',
        },
    });

    firewallButton.onclick = activateFirewall;
    document.body.appendChild(firewallButton);
}

// Main function to initialize everything
function initializeHack() {
    createPersistentOverlay();
    createNotesButton();
    createModMenu();
    createFirewallButton();
    solveProblemLoop(normalSolveSpeed);
}

// Start the initialization
initializeHack();
