// Helper function to create and append an element with specific properties
function createElement(tag, options = {}) {
    const element = document.createElement(tag);
    Object.assign(element.style, options.style || {});
    if (options.id) element.id = options.id;
    if (options.textContent) element.textContent = options.textContent;
    if (options.innerHTML) element.innerHTML = options.innerHTML;
    if (options.className) element.className = options.className;
    return element;
}

// Common styles for overlay and menu
const commonStyles = {
    position: 'fixed',
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    color: 'white',
    borderRadius: '10px',
    boxShadow: '0 0 15px rgba(0, 0, 0, 0.7)',
    fontFamily: 'Arial, sans-serif',
    fontSize: '18px',
    fontWeight: 'bold',
};

// Function to create and display a persistent overlay
function createPersistentOverlay() {
    if (document.getElementById('persistent-overlay')) return; // Exit if overlay exists

    const overlay = createElement('div', {
        id: 'persistent-overlay',
        style: {
            ...commonStyles,
            bottom: '20px',
            right: '20px',
            padding: '20px',
            textAlign: 'center',
            zIndex: '9999',
        },
        innerHTML: `
            <div>Ilakn</div>
            <div>Version 3.45</div>
            <button id="youtube-button" class="overlay-button" style="margin-top: 10px; padding: 5px 10px; border: none; border-radius: 5px; background-color: #555; color: white; cursor: pointer;">
                Subscribe to OffLcer Gaming
            </button>
        `,
    });

    // Set button functionality for YouTube link
    overlay.querySelector('#youtube-button').onclick = () => {
        window.open('https://youtube.com/@offlcergaming?si=5PExaPOmDsgxyVnd', '_blank');
    };

    document.body.appendChild(overlay);
}

// Function to create and display a draggable mod menu
function createModMenu() {
    if (document.getElementById('mod-menu')) return; // Exit if menu exists

    const menu = createElement('div', {
        id: 'mod-menu',
        style: {
            ...commonStyles,
            top: '20px',
            left: '20px',
            padding: '15px',
            zIndex: '10000',
            cursor: 'move',
        },
        textContent: 'Mod Menu',
    });

    // Add "Save Progress" button
    const saveButton = createElement('button', {
        textContent: 'Save Progress',
        style: {
            marginTop: '10px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            backgroundColor: '#555',
            color: 'white',
            cursor: 'pointer',
        },
    });

    saveButton.onclick = () => {
        localStorage.setItem('gameState', JSON.stringify(getGameState()));
        alert('Progress Saved!');
    };

    // Add "Load Progress" button
    const loadButton = createElement('button', {
        textContent: 'Load Progress',
        style: {
            marginTop: '10px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            backgroundColor: '#555',
            color: 'white',
            cursor: 'pointer',
        },
    });

    loadButton.onclick = () => {
        const savedState = JSON.parse(localStorage.getItem('gameState'));
        if (savedState) {
            setGameState(savedState);
            alert('Progress Loaded!');
        } else {
            alert('No saved progress found.');
        }
    };

    menu.appendChild(saveButton);
    menu.appendChild(loadButton);

    // Add drag functionality
    let offsetX, offsetY;

    menu.onmousedown = (event) => {
        offsetX = event.clientX - menu.getBoundingClientRect().left;
        offsetY = event.clientY - menu.getBoundingClientRect().top;

        const onMouseMove = (event) => {
            menu.style.left = `${event.clientX - offsetX}px`;
            menu.style.top = `${event.clientY - offsetY}px`;
        };

        const onMouseUp = () => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    };

    document.body.appendChild(menu);
}

// Dummy functions for game state management
// Replace these with actual game state logic
function getGameState() {
    return {}; // Replace with actual game state retrieval
}

function setGameState(state) {
    // Replace with actual game state setting logic
}

// Function to handle the problem-solving logic
function solveProblem() {
    const problemElement = document.querySelector(".card-title");
    if (!problemElement) {
        console.error("Problem element not found. Retrying...");
        return retrySolveProblem(); // Retry if problem element not found
    }

    const problem = problemElement.innerText.trim();
    const [num1Str, num2Str] = problem.split('x').map(str => str.trim());

    // Ensure correct parsing of numbers
    const num1 = parseInt(num1Str, 10);
    const num2 = parseInt(num2Str, 10);
    if (isNaN(num1) || isNaN(num2)) {
        console.error("Error parsing numbers:", problem);
        return retrySolveProblem(); // Retry if numbers invalid
    }

    const answer = num1 * num2;
    const options = Array.from(document.querySelectorAll(".card-button"));

    // Find and click the correct option
    const correctOption = options.find(option => parseInt(option.innerText.trim(), 10) === answer);
    if (correctOption) {
        correctOption.click();
        console.log(`Clicked on the correct answer: ${answer}`);
    } else {
        console.error("Correct answer not found among options. Retrying...");
        retrySolveProblem(); // Retry if correct option not found
    }
}

// Retry solving after a minimal delay (0.1 seconds for faster response)
function retrySolveProblem() {
    setTimeout(solveProblem, 100); // Retry every 0.1 seconds
}

// Function to continuously solve problems with a minimal delay (0.1 seconds)
function solveProblemLoop() {
    solveProblem();
    setTimeout(solveProblemLoop, 100); // Repeat every 0.1 seconds
}

// Main function to initialize the overlay, menu, and start solving problems
function initializeHack() {
    createPersistentOverlay();
    createModMenu();
    solveProblemLoop(); // Start the continuous solving process
}

// Initialize and start the function
initializeHack();
