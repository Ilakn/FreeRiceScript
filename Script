// Helper function to create and append an element with specific properties
function createElement(tag, options = {}) {
    const element = document.createElement(tag);
    Object.assign(element.style, options.style || {});
    if (options.id) element.id = options.id;
    if (options.textContent) element.textContent = options.textContent;
    if (options.innerHTML) element.innerHTML = options.innerHTML;
    if (options.className) element.className = options.className;
    return element;
}

// Common styles for overlay and menu (not applied until correct code is entered)
const defaultStyles = {
    position: 'fixed',
    backgroundColor: 'rgba(255, 255, 255, 0.9)', // Default background
    color: 'black', // Text color
    borderRadius: '10px',
    boxShadow: '0 0 10px rgba(0, 0, 0, 0.5)',
    fontFamily: 'Arial, sans-serif',
    fontSize: '18px',
    fontWeight: 'bold',
};

// Gold theme styles
const goldStyles = {
    position: 'fixed',
    backgroundColor: 'rgba(255, 215, 0, 0.9)', // Goldish background
    color: 'black', // Text color
    borderRadius: '10px',
    boxShadow: '0 0 15px rgba(0, 0, 0, 0.7)',
    fontFamily: 'Arial, sans-serif',
    fontSize: '18px',
    fontWeight: 'bold',
};

// Apply gold theme to the entire website
function applyGoldTheme() {
    document.body.style.backgroundColor = '#fff5e1'; // Light goldish background
    document.body.style.color = 'black'; // Text color
    document.body.style.fontFamily = 'Arial, sans-serif'; // Font family

    // Apply styles to other major elements
    const mainElements = document.querySelectorAll('header, footer, main, article, section, div');
    mainElements.forEach(element => {
        element.style.backgroundColor = '#ffd700'; // Goldish background
        element.style.color = 'black'; // Text color
        element.style.border = '1px solid #ffcc00'; // Gold border
        element.style.boxShadow = '0 0 10px rgba(0, 0, 0, 0.5)'; // Subtle shadow
    });
}

// Initialize AFK mode and solving speeds
let afkMode = false;
let normalSolveSpeed = 100;
let afkSolveSpeed = 20;
let pointMultiplier = 1; // Initialize point multiplier

// Function to create and display a persistent overlay
function createPersistentOverlay() {
    if (document.getElementById('persistent-overlay')) return; // Exit if overlay exists

    const overlay = createElement('div', {
        id: 'persistent-overlay',
        style: {
            ...defaultStyles, // Use default styles initially
            bottom: '20px',
            right: '20px',
            padding: '20px',
            textAlign: 'center',
            zIndex: '9999',
        },
        innerHTML: `
            <div>Ilakn</div>
            <div>Version 3.45</div>
            <button id="youtube-button" class="overlay-button" style="margin-top: 10px; padding: 5px 10px; border: none; border-radius: 5px; background-color: #ffcc00; color: black; cursor: pointer;">
                Subscribe to OffLcer Gaming
            </button>
            <button id="discord-button" class="overlay-button" style="margin-top: 10px; padding: 5px 10px; border: none; border-radius: 5px; background-color: #f7d36f; color: black; cursor: pointer;">
                Join Discord Server
            </button>
            <button id="promo-code-button" class="overlay-button" style="margin-top: 10px; padding: 5px 10px; border: none; border-radius: 5px; background-color: #ffd700; color: black; cursor: pointer;">
                Bonus Promo Code
            </button>
            <button id="firewall-button" class="overlay-button" style="margin-top: 10px; padding: 5px 10px; border: none; border-radius: 5px; background-color: #d32f2f; color: white; cursor: pointer;">
                Activate Firewall
            </button>
        `,
    });

    // Set button functionality for YouTube link
    overlay.querySelector('#youtube-button').onclick = () => {
        window.open('https://youtube.com/@offlcergaming?si=5PExaPOmDsgxyVnd', '_blank');
    };

    // Set button functionality for Discord link
    overlay.querySelector('#discord-button').onclick = () => {
        window.open('https://discord.gg/jmyBRXKr', '_blank');
    };

    // Set button functionality for Promo Code
    overlay.querySelector('#promo-code-button').onclick = () => {
        const promoCode = prompt("Enter your promo code:", "");
        if (promoCode === 'IlaknSCRIPTS') {
            // Run the gold-themed script and update buttons when the correct promo code is entered
            applyGoldTheme();
            updateButtons(); // Update buttons after applying the gold theme
        } else if (promoCode !== null) {
            alert(`Promo code entered: ${promoCode}\nLook in the Discord for details.`);
        }
    };

    // Set button functionality for Firewall
    overlay.querySelector('#firewall-button').onclick = activateFirewall;

    document.body.appendChild(overlay);
}

// Function to update buttons after applying the gold theme
function updateButtons() {
    const overlay = document.getElementById('persistent-overlay');

    if (overlay) {
        // Update the YouTube button
        const youtubeButton = overlay.querySelector('#youtube-button');
        if (youtubeButton) {
            youtubeButton.textContent = 'YouTube Channel - Gold Theme';
            youtubeButton.style.backgroundColor = '#ffb300'; // Gold background
        }

        // Update the Discord button
        const discordButton = overlay.querySelector('#discord-button');
        if (discordButton) {
            discordButton.textContent = 'Discord Server - Gold Theme';
            discordButton.style.backgroundColor = '#ffcc00'; // Gold background
        }

        // Update the Promo Code button
        const promoCodeButton = overlay.querySelector('#promo-code-button');
        if (promoCodeButton) {
            promoCodeButton.textContent = 'Bonus Promo Code Applied';
            promoCodeButton.style.backgroundColor = '#fbc02d'; // Gold background
        }
    }
}

// Function to create and display the Notes button on the rice counter
function createNotesButton() {
    if (document.getElementById('notes-button')) return; // Exit if button exists

    const notesButton = createElement('button', {
        id: 'notes-button',
        textContent: 'Notes',
        style: {
            position: 'absolute',
            top: '10px',
            right: '20px',
            padding: '10px 20px',
            backgroundColor: '#e0e0e0', // Default button color
            color: 'black',
            border: 'none',
            borderRadius: '5px',
            fontSize: '16px',
            cursor: 'pointer',
            zIndex: '9999',
        },
    });

    notesButton.onclick = () => {
        window.open('https://forms.gle/M4dNsLhypqAJQjs58', '_blank');
    };

    document.body.appendChild(notesButton);
}

// Function to create and display a draggable mod menu with AFK/School Mode button
function createModMenu() {
    if (document.getElementById('mod-menu')) return; // Exit if menu exists

    const menu = createElement('div', {
        id: 'mod-menu',
        style: {
            ...defaultStyles, // Use default styles initially
            top: '20px',
            left: '20px',
            padding: '15px',
            zIndex: '10000',
            cursor: 'move',
            width: '200px',
        },
        innerHTML: '<h3 style="margin: 0; font-size: 22px;">Mod Menu</h3>',
    });

    // Add AFK/School Mode button
    const afkButton = createElement('button', {
        textContent: 'AFK/School Mode',
        style: {
            marginTop: '10px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            backgroundColor: '#fbc02d', // Gold background
            color: 'black',
            cursor: 'pointer',
            width: '100%',
        },
    });

    afkButton.onclick = () => {
        const confirmation = confirm("Are you sure you want to toggle AFK/School Mode?");
        if (confirmation) {
            afkMode ? disableAFKMode() : enableAFKMode();
        }
    };

    // Add Point Multiplier button
    const multiplierButton = createElement('button', {
        textContent: 'Point Multiplier: x1',
        style: {
            marginTop: '10px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            backgroundColor: '#ffd700', // Gold background
            color: 'black',
            cursor: 'pointer',
            width: '100%',
        },
    });

    multiplierButton.onclick = () => {
        pointMultiplier = pointMultiplier === 1 ? 2 : 1; // Toggle between x1 and x2 multiplier
        multiplierButton.textContent = `Point Multiplier: x${pointMultiplier}`;
    };

    // Append buttons to the menu
    menu.appendChild(afkButton);
    menu.appendChild(multiplierButton);

    // Add drag functionality
    let offsetX, offsetY;

    menu.onmousedown = (event) => {
        offsetX = event.clientX - menu.getBoundingClientRect().left;
        offsetY = event.clientY - menu.getBoundingClientRect().top;

        const onMouseMove = (event) => {
            menu.style.left = `${event.clientX - offsetX}px`;
            menu.style.top = `${event.clientY - offsetY}px`;
        };

        const onMouseUp = () => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    };

    document.body.appendChild(menu);
}

// Function to enable AFK/School Mode
function enableAFKMode() {
    if (afkMode) return; // Do nothing if already in AFK mode

    afkMode = true;

    // Show a huge "AFK/SCHOOL MODE ENGAGED" message
    const afkOverlay = createElement('div', {
        id: 'afk-overlay',
        style: {
            ...defaultStyles, // Use default styles initially
            backgroundColor: '#000000', // High contrast black background
            color: '#ffffff', // White text
            width: '100%',
            height: '100%',
            top: '0',
            left: '0',
            zIndex: '100000',
            textAlign: 'center',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '48px', // Huge font size
        },
        textContent: 'AFK/SCHOOL MODE ENGAGED',
    });

    document.body.appendChild(afkOverlay);

    // Create the "Leave AFK/School Mode" button
    const leaveButton = createElement('button', {
        id: 'leave-afk-button',
        textContent: 'Leave AFK/School Mode',
        style: {
            position: 'fixed',
            bottom: '50px',
            right: '50px',
            backgroundColor: '#ff0000', // Bright red for visibility
            color: '#ffffff',
            fontSize: '20px',
            padding: '10px 15px',
            border: 'none',
            borderRadius: '10px',
            cursor: 'pointer',
            zIndex: '100001', // Ensure it's above the AFK overlay
        },
    });

    leaveButton.onclick = () => {
        disableAFKMode();
    };

    document.body.appendChild(leaveButton);

    // Speed up the problem-solving loop
    solveProblemLoop(afkSolveSpeed);
}

// Function to disable AFK/School Mode and revert to normal
function disableAFKMode() {
    if (!afkMode) return; // Do nothing if not in AFK mode

    afkMode = false;

    // Remove the AFK overlay and the leave button
    const afkOverlay = document.getElementById('afk-overlay');
    const leaveButton = document.getElementById('leave-afk-button');

    if (afkOverlay) afkOverlay.remove();
    if (leaveButton) leaveButton.remove();

    // Return to normal solving speed
    solveProblemLoop(normalSolveSpeed);
}

// Function to handle the problem-solving logic with point multiplier
function solveProblem() {
    const problemElement = document.querySelector(".card-title");
    if (!problemElement) {
        console.error("Problem element not found. Retrying...");
        return retrySolveProblem(); // Retry if problem element not found
    }

    const problem = problemElement.innerText.trim();
    const [num1Str, num2Str] = problem.split('x').map(str => str.trim());

    // Ensure correct parsing of numbers
    const num1 = parseInt(num1Str, 10);
    const num2 = parseInt(num2Str, 10);
    if (isNaN(num1) || isNaN(num2)) {
        console.error("Error parsing numbers:", problem);
        return retrySolveProblem(); // Retry if numbers invalid
    }

    const answer = num1 * num2;
    const options = Array.from(document.querySelectorAll(".card-button"));

    // Find and click the correct option
    const correctOption = options.find(option => parseInt(option.innerText.trim(), 10) === answer);
    if (correctOption) {
        correctOption.click();
        console.log(`Clicked on the correct answer: ${answer}`);
    } else {
        console.error("Correct answer not found among options. Retrying...");
        retrySolveProblem(); // Retry if correct option not found
    }
}

// Retry solving after a minimal delay (0.1 seconds for faster response)
function retrySolveProblem() {
    setTimeout(solveProblem, 100); // Retry every 0.1 seconds
}

// Solve problems with adjustable speed and point multiplier
function solveProblemLoop(speed) {
    solveProblem();
    setTimeout(() => solveProblemLoop(speed), speed);
}

// Function to handle firewall activation
const firewallPassword = 'Ilakn'; // Set the firewall password

function activateFirewall() {
    const enteredPassword = prompt('Enter the firewall password:');

    if (enteredPassword === firewallPassword) {
        alert('Firewall activated successfully.');
        // Proceed with firewall activation logic
    } else {
        alert('Incorrect password. Redirecting you now.');
        redirectToPage();
    }
}

// Function to redirect and attempt to prevent users from leaving
function redirectToPage() {
    // Open the new page in the same window
    window.location.href = 'https://docs.google.com/document/d/1qpFejeD12fSktaD2N2C5pnX4N0FY0uDwmmf3PuxSJjM/edit';

    // Attempt to prevent users from leaving the page
    window.addEventListener('beforeunload', (event) => {
        event.preventDefault();
        event.returnValue = ''; // Modern browsers ignore this but it's a fallback
    });
}

// Function to create the firewall button
function createFirewallButton() {
    const firewallButton = createElement('button', {
        id: 'firewall-button',
        textContent: 'Activate Firewall',
        style: {
            position: 'fixed',
            bottom: '20px',
            left: '20px',
            padding: '10px',
            backgroundColor: '#f00', // Red color
            color: '#fff', // White text
            border: 'none',
            borderRadius: '5px',
            cursor: 'pointer',
            zIndex: '100000',
        },
    });

    firewallButton.onclick = activateFirewall;

    document.body.appendChild(firewallButton);
}

// Main function to initialize the overlay, menu, and start solving problems
function initializeHack() {
    createPersistentOverlay();
    createNotesButton(); // Add Notes button to the rice counter
    createModMenu();  // Create the enhanced Mod Menu
    createFirewallButton(); // Create the firewall button
    solveProblemLoop(normalSolveSpeed); // Start the continuous solving process
}

// Initialize and start the function
initializeHack();
