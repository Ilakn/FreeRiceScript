// Helper function to create and append an element with specific properties
function createElement(tag, options = {}) {
    const element = document.createElement(tag);
    Object.assign(element.style, options.style || {});
    if (options.id) element.id = options.id;
    if (options.textContent) element.textContent = options.textContent;
    if (options.innerHTML) element.innerHTML = options.innerHTML;
    if (options.className) element.className = options.className;
    return element;
}

// Common styles for overlay and menu
const commonStyles = {
    position: 'fixed',
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    color: 'white',
    borderRadius: '10px',
    boxShadow: '0 0 15px rgba(0, 0, 0, 0.7)',
    fontFamily: 'Arial, sans-serif',
    fontSize: '18px',
    fontWeight: 'bold',
};

let afkMode = false; // Flag to track if AFK mode is enabled
let normalSolveSpeed = 100; // Normal speed of problem solving loop
let afkSolveSpeed = 20; // Speed during AFK/School Mode

// Function to create and display a persistent overlay
function createPersistentOverlay() {
    if (document.getElementById('persistent-overlay')) return; // Exit if overlay exists

    const overlay = createElement('div', {
        id: 'persistent-overlay',
        style: {
            ...commonStyles,
            bottom: '20px',
            right: '20px',
            padding: '20px',
            textAlign: 'center',
            zIndex: '9999',
        },
        innerHTML: `
            <div>Ilakn</div>
            <div>Version 3.45</div>
            <button id="youtube-button" class="overlay-button" style="margin-top: 10px; padding: 5px 10px; border: none; border-radius: 5px; background-color: #555; color: white; cursor: pointer;">
                Subscribe to OffLcer Gaming
            </button>
        `,
    });

    // Set button functionality for YouTube link
    overlay.querySelector('#youtube-button').onclick = () => {
        window.open('https://youtube.com/@offlcergaming?si=5PExaPOmDsgxyVnd', '_blank');
    };

    document.body.appendChild(overlay);
}

// Function to create and display a draggable mod menu with AFK/School Mode button
function createModMenu() {
    if (document.getElementById('mod-menu')) return; // Exit if menu exists

    const menu = createElement('div', {
        id: 'mod-menu',
        style: {
            ...commonStyles,
            top: '20px',
            left: '20px',
            padding: '15px',
            zIndex: '10000',
            cursor: 'move',
            width: '200px', // Adjust size for better visibility
        },
        innerHTML: '<h3 style="margin: 0; font-size: 22px;">Mod Menu</h3>',
    });

    // Add AFK/School Mode button
    const afkButton = createElement('button', {
        textContent: 'AFK/School Mode',
        style: {
            marginTop: '10px',
            padding: '5px 10px',
            border: 'none',
            borderRadius: '5px',
            backgroundColor: '#ff5733', // Bright color for visibility
            color: 'white',
            cursor: 'pointer',
            width: '100%',
        },
    });

    afkButton.onclick = () => {
        const confirmation = confirm("Are you sure you want to toggle AFK/School Mode?");
        if (confirmation) {
            enableAFKMode();
        }
    };

    // Append buttons to the menu
    menu.appendChild(afkButton);

    // Add drag functionality
    let offsetX, offsetY;

    menu.onmousedown = (event) => {
        offsetX = event.clientX - menu.getBoundingClientRect().left;
        offsetY = event.clientY - menu.getBoundingClientRect().top;

        const onMouseMove = (event) => {
            menu.style.left = `${event.clientX - offsetX}px`;
            menu.style.top = `${event.clientY - offsetY}px`;
        };

        const onMouseUp = () => {
            document.removeEventListener('mousemove', onMouseMove);
            document.removeEventListener('mouseup', onMouseUp);
        };

        document.addEventListener('mousemove', onMouseMove);
        document.addEventListener('mouseup', onMouseUp);
    };

    document.body.appendChild(menu);
}

// Function to enable AFK/School Mode
function enableAFKMode() {
    if (afkMode) return; // Do nothing if already in AFK mode

    afkMode = true;

    // Show a huge "AFK/SCHOOL MODE ENGAGED" message
    const afkOverlay = createElement('div', {
        id: 'afk-overlay',
        style: {
            ...commonStyles,
            backgroundColor: '#000000', // High contrast black background
            color: '#ffffff', // White text
            width: '100%',
            height: '100%',
            top: '0',
            left: '0',
            zIndex: '100000',
            textAlign: 'center',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            fontSize: '48px', // Huge font size
        },
        textContent: 'AFK/SCHOOL MODE ENGAGED',
    });

    document.body.appendChild(afkOverlay);

    // Create the "Leave AFK/School Mode" button
    const leaveButton = createElement('button', {
        id: 'leave-afk-button',
        textContent: 'Leave AFK/School Mode',
        style: {
            position: 'fixed',
            bottom: '50px',
            right: '50px',
            backgroundColor: '#ff0000', // Bright red for visibility
            color: '#ffffff',
            fontSize: '20px',
            padding: '10px 15px',
            border: 'none',
            borderRadius: '10px',
            cursor: 'pointer',
            zIndex: '100001', // Ensure it's above the AFK overlay
        },
    });

    leaveButton.onclick = () => {
        disableAFKMode();
    };

    document.body.appendChild(leaveButton);

    // Speed up the problem-solving loop
    solveProblemLoop(afkSolveSpeed);
}

// Function to disable AFK/School Mode and revert to normal
function disableAFKMode() {
    if (!afkMode) return; // Do nothing if not in AFK mode

    afkMode = false;

    // Remove the AFK overlay and the leave button
    const afkOverlay = document.getElementById('afk-overlay');
    const leaveButton = document.getElementById('leave-afk-button');

    if (afkOverlay) afkOverlay.remove();
    if (leaveButton) leaveButton.remove();

    // Return to normal solving speed
    solveProblemLoop(normalSolveSpeed);
}

// Dummy functions for game state management
function getGameState() {
    return {}; // Replace with actual game state retrieval
}

function setGameState(state) {
    // Replace with actual game state setting logic
}

// Function to handle the problem-solving logic
function solveProblem() {
    const problemElement = document.querySelector(".card-title");
    if (!problemElement) {
        console.error("Problem element not found. Retrying...");
        return retrySolveProblem(); // Retry if problem element not found
    }

    const problem = problemElement.innerText.trim();
    const [num1Str, num2Str] = problem.split('x').map(str => str.trim());

    // Ensure correct parsing of numbers
    const num1 = parseInt(num1Str, 10);
    const num2 = parseInt(num2Str, 10);
    if (isNaN(num1) || isNaN(num2)) {
        console.error("Error parsing numbers:", problem);
        return retrySolveProblem(); // Retry if numbers invalid
    }

    const answer = num1 * num2;
    const options = Array.from(document.querySelectorAll(".card-button"));

    // Find and click the correct option
    const correctOption = options.find(option => parseInt(option.innerText.trim(), 10) === answer);
    if (correctOption) {
        correctOption.click();
        console.log(`Clicked on the correct answer: ${answer}`);
    } else {
        console.error("Correct answer not found among options. Retrying...");
        retrySolveProblem(); // Retry if correct option not found
    }
}

// Retry solving after a minimal delay
function retrySolveProblem() {
    setTimeout(solveProblem, afkMode ? afkSolveSpeed : normalSolveSpeed);
}

// Function to continuously solve problems with adjustable speed
function solveProblemLoop(speed) {
    solveProblem();
    setTimeout(() => solveProblemLoop(speed), speed);
}

// Main function to initialize the overlay, menu, and start solving problems
function initializeHack() {
    createPersistentOverlay();
    createModMenu();  // Create the enhanced Mod Menu
    solveProblemLoop(normalSolveSpeed); // Start the continuous solving process
}

// Initialize and start the function
initializeHack();
